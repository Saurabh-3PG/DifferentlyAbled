{"ast":null,"code":"/* global Promise */\nvar axeCore = require('axe-core');\n\nvar rIC = require('requestidlecallback');\n\nvar after = require('./after');\n\nvar requestIdleCallback = rIC.request;\nvar cancelIdleCallback = rIC.cancel;\nvar React = undefined;\nvar ReactDOM = undefined;\nvar boldCourier = 'font-weight:bold;font-family:Courier;';\nvar critical = 'color:red;font-weight:bold;';\nvar serious = 'color:red;font-weight:normal;';\nvar moderate = 'color:orange;font-weight:bold;';\nvar minor = 'color:orange;font-weight:normal;';\nvar defaultReset = 'font-color:black;font-weight:normal;';\nvar idleId;\nvar timeout;\n\nvar _createElement;\n\nvar components = {};\nvar nodes = [document.documentElement];\nvar cache = {};\n\nfunction getPath(node) {\n  var path = [node];\n\n  while (node && node.nodeName.toLowerCase() !== 'html') {\n    path.push(node.parentNode);\n    node = node.parentNode;\n  }\n\n  if (!node || !node.parentNode) {\n    return null;\n  }\n\n  return path.reverse();\n}\n\nfunction getCommonParent(nodes) {\n  var path, nextPath;\n\n  if (nodes.length === 1) {\n    return nodes.pop();\n  }\n\n  while (!path && nodes.length) {\n    path = getPath(nodes.pop());\n  }\n\n  while (nodes.length) {\n    nextPath = getPath(nodes.pop());\n\n    if (nextPath) {\n      path = path.filter(function (node, index) {\n        return nextPath.length > index && nextPath[index] === node;\n      });\n    }\n  }\n\n  return path ? path[path.length - 1] : document;\n}\n\nfunction logElement(node, logFn) {\n  var el = document.querySelector(node.target.toString());\n\n  if (!el) {\n    logFn('Selector: %c%s', boldCourier, node.target.toString());\n  } else {\n    logFn('Element: %o', el);\n  }\n}\n\nfunction logHtml(node) {\n  console.log('HTML: %c%s', boldCourier, node.html);\n}\n\nfunction logFailureMessage(node, key) {\n  var message = axeCore._audit.data.failureSummaries[key].failureMessage(node[key].map(function (check) {\n    return check.message || '';\n  }));\n\n  console.error(message);\n}\n\nfunction failureSummary(node, key) {\n  if (node[key].length > 0) {\n    logElement(node, console.groupCollapsed);\n    logHtml(node);\n    logFailureMessage(node, key);\n    var relatedNodes = [];\n    node[key].forEach(function (check) {\n      relatedNodes = relatedNodes.concat(check.relatedNodes);\n    });\n\n    if (relatedNodes.length > 0) {\n      console.groupCollapsed('Related nodes');\n      relatedNodes.forEach(function (relatedNode) {\n        logElement(relatedNode, console.log);\n        logHtml(relatedNode);\n      });\n      console.groupEnd();\n    }\n\n    console.groupEnd();\n  }\n}\n\nfunction createDeferred() {\n  var deferred = {};\n  deferred.promise = new Promise(function (resolve, reject) {\n    deferred.resolve = resolve;\n    deferred.reject = reject;\n  });\n  return deferred;\n}\n\nfunction checkAndReport(node, timeout) {\n  if (idleId) {\n    cancelIdleCallback(idleId);\n    idleId = undefined;\n  }\n\n  var deferred = createDeferred();\n  nodes.push(node);\n  idleId = requestIdleCallback(function () {\n    var n = getCommonParent(nodes.filter(function (node) {\n      return node.isConnected;\n    }));\n\n    if (n.nodeName.toLowerCase() === 'html') {\n      // if the only common parent is the body, then analyze the whole page\n      n = document;\n    }\n\n    axeCore.run(n, {\n      reporter: 'v2'\n    }, function (error, results) {\n      if (error) {\n        return deferred.reject(error);\n      }\n\n      results.violations = results.violations.filter(function (result) {\n        result.nodes = result.nodes.filter(function (node) {\n          var key = node.target.toString() + result.id;\n          var retVal = !cache[key];\n          cache[key] = key;\n          return retVal;\n        });\n        return !!result.nodes.length;\n      });\n\n      if (results.violations.length) {\n        console.group('%cNew aXe issues', serious);\n        results.violations.forEach(function (result) {\n          var fmt;\n\n          switch (result.impact) {\n            case 'critical':\n              fmt = critical;\n              break;\n\n            case 'serious':\n              fmt = serious;\n              break;\n\n            case 'moderate':\n              fmt = moderate;\n              break;\n\n            case 'minor':\n              fmt = minor;\n              break;\n\n            default:\n              fmt = minor;\n              break;\n          }\n\n          console.groupCollapsed('%c%s: %c%s %s', fmt, result.impact, defaultReset, result.help, result.helpUrl);\n          result.nodes.forEach(function (node) {\n            failureSummary(node, 'any');\n            failureSummary(node, 'none');\n          });\n          console.groupEnd();\n        });\n        console.groupEnd();\n      }\n\n      deferred.resolve();\n    });\n  }, {\n    timeout: timeout\n  });\n  return deferred.promise;\n}\n\nfunction checkNode(component) {\n  var node = null;\n\n  try {\n    node = ReactDOM.findDOMNode(component);\n  } catch (e) {\n    console.group('%caXe error: could not check node', critical);\n    console.group('%cComponent', serious);\n    console.error(component);\n    console.groupEnd();\n    console.group('%cError', serious);\n    console.error(e);\n    console.groupEnd();\n    console.groupEnd();\n  }\n\n  if (node) {\n    checkAndReport(node, timeout);\n  }\n}\n\nfunction componentAfterRender(component) {\n  after(component, 'componentDidMount', checkNode);\n  after(component, 'componentDidUpdate', checkNode);\n}\n\nfunction addComponent(component) {\n  var reactInstance = component._reactInternalInstance || {};\n  var reactInstanceDebugID = reactInstance._debugID;\n  var reactFiberInstance = component._reactInternalFiber || {};\n  var reactFiberInstanceDebugID = reactFiberInstance._debugID;\n\n  if (reactInstanceDebugID && !components[reactInstanceDebugID]) {\n    components[reactInstanceDebugID] = component;\n    componentAfterRender(component);\n  } else if (reactFiberInstanceDebugID && !components[reactFiberInstanceDebugID]) {\n    components[reactFiberInstanceDebugID] = component;\n    componentAfterRender(component);\n  }\n}\n\nvar reactAxe = function reactAxe(_React, _ReactDOM, _timeout, conf) {\n  React = _React;\n  ReactDOM = _ReactDOM;\n  timeout = _timeout;\n\n  if (conf) {\n    axeCore.configure(conf);\n  }\n\n  axeCore.configure({\n    checks: [{\n      id: 'color-contrast',\n      options: {\n        noScroll: true\n      }\n    }]\n  });\n\n  if (!_createElement) {\n    _createElement = React.createElement;\n\n    React.createElement = function () {\n      var reactEl = _createElement.apply(this, arguments);\n\n      if (reactEl._owner && reactEl._owner._instance) {\n        addComponent(reactEl._owner._instance);\n      } else if (reactEl._owner && reactEl._owner.stateNode) {\n        addComponent(reactEl._owner.stateNode);\n      }\n\n      return reactEl;\n    };\n  }\n\n  return checkAndReport(document.body, timeout);\n};\n\nmodule.exports = reactAxe;","map":null,"metadata":{},"sourceType":"script"}